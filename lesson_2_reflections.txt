Q1. : What happens when you initialize a repository? Why do you need to do it?
Answer : Initializing a repository makes some hidden file like .git and these files keep track of all the history of the files and their commits. We need it because if we want to keep track of my history as well as if I want to compare my older version of files with newer one. And also it helps to debug files.

Q2 : How is the staging area different from the working directory and the repository? What value do you think it offers?
Answer : Working directory contains all the files. Repository keeps track of all the files with commit ids. When we want some of the files to commit from working directory we have to add it into staging area. It offers value like we can differantiate the files which to be commited an which to be not.

Q3 : How can you use the staging area to make sure you have one commit per logical change?
Answer : We can compare the files staging area to the latest commit using command "git diff --staged". And by comparing we can get to know that this commit will be only logical change. If its more than one logical change then we can remove that change from staging area to working directory.

Q4 : What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Answer : There are some situations in which current version is working fine and want give it to users and we work on enhancements and adding new features, then we create a branch like master which will be latest code with added new features and bug fixes and one other branch with some name which will be given to the users.
So branching helps in this situation as we can switch between branches when needed.

Q5 : How do the diagrams help you visualize the branch structure?
Answer : Diagram shows the structures of commits that has been made and at the same if any branch is created then that can also be visualize. Using diagram we can check which commits are reachable and not.

Q6 : What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Answer : Merging branches will merge the other branch with the branch which is checked out. It will sort the commit ids with time stamp. And all the changes will be merged. Diagrams make the things clear and we can visualize the thing more clearly. In diagram we can actually see where it is getting merged, where the branches were made.